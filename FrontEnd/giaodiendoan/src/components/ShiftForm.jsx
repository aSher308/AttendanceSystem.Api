import React, { useEffect, useState } from "react";
import axios from "axios";
import { API_URL } from "../config";
import "../styles/style.css";

const ShiftForm = () => {
  const [shifts, setShifts] = useState([]);
  const [formData, setFormData] = useState({
    name: "",
    startTime: "",
    endTime: "",
    isActive: true, // th√™m m·∫∑c ƒë·ªãnh true
    description: "", // th√™m tr∆∞·ªùng m√¥ t·∫£
  });
  const [updateId, setUpdateId] = useState(null);

  // L·∫•y danh s√°ch ca l√†m
  const fetchShifts = async () => {
    try {
      const res = await axios.get(`${API_URL}/Shift`);
      setShifts(res.data);
    } catch (err) {
      console.error("L·ªói khi l·∫•y danh s√°ch ca l√†m:", err);
    }
  };

  useEffect(() => {
    fetchShifts();
  }, []);

  // X·ª≠ l√Ω thay ƒë·ªïi d·ªØ li·ªáu form
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (type === "checkbox") {
      setFormData((prev) => ({ ...prev, [name]: checked }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t ca l√†m
  const handleSubmit = async (e) => {
    e.preventDefault();

    const dataToSend = {
      name: formData.name,
      startTime: formData.startTime + ":00",
      endTime: formData.endTime + ":00",
      isActive: formData.isActive,
      description: formData.description || null,
    };
    console.log("G·ª≠i d·ªØ li·ªáu:", dataToSend);

    try {
      if (updateId) {
        await axios.put(`${API_URL}/Shift/Update`, {
          id: updateId,
          ...dataToSend,
        });
        alert("C·∫≠p nh·∫≠t ca l√†m th√†nh c√¥ng!");
      } else {
        await axios.post(`${API_URL}/Shift/Create`, dataToSend);
        alert("T·∫°o ca l√†m th√†nh c√¥ng!");
      }
      setFormData({
        name: "",
        startTime: "",
        endTime: "",
        isActive: true,
        description: "",
      });
      setUpdateId(null);
      fetchShifts();
    } catch (err) {
      console.error("L·ªói khi l∆∞u:", err);
    }
  };

  // Ch·ªçn ca l√†m ƒë·ªÉ s·ª≠a
  const handleEdit = (shift) => {
    // B·ªè :00 n·∫øu c√≥ ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng v√†o input type="time"
    const trimTime = (time) => (time?.length === 8 ? time.slice(0, 5) : time);

    setFormData({
      name: shift.name,
      startTime: trimTime(shift.startTime),
      endTime: trimTime(shift.endTime),
      isActive: shift.isActive,
      description: shift.description || "",
    });
    setUpdateId(shift.id);
  };

  // X√≥a ca l√†m
  const handleDelete = async (id) => {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ca l√†m n√†y?")) {
      try {
        await axios.delete(`${API_URL}/Shift/${id}`);
        alert("ƒê√£ x√≥a ca l√†m!");
        fetchShifts();
      } catch (err) {
        console.error("L·ªói khi x√≥a:", err);
      }
    }
  };

  // Thay ƒë·ªïi tr·∫°ng th√°i ca l√†m
  const toggleStatus = async (id, currentStatus) => {
    try {
      await axios.patch(
        `${API_URL}/Shift/${id}/status?isActive=${!currentStatus}`
      );
      alert("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
      fetchShifts();
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
    }
  };

  return (
    <div className="shift-form-container">
      <h2 className="text-xl font-bold mb-4">
        {updateId ? "C·∫≠p nh·∫≠t" : "T·∫°o"} Ca L√†m
      </h2>
      <form onSubmit={handleSubmit} className="space-y-3">
        <input
          type="text"
          name="name"
          placeholder="T√™n ca l√†m"
          value={formData.name}
          onChange={handleChange}
          required
          className="w-full border p-2 rounded"
        />
        <input
          type="time"
          name="startTime"
          value={formData.startTime}
          onChange={handleChange}
          required
          className="w-full border p-2 rounded"
        />
        <input
          type="time"
          name="endTime"
          value={formData.endTime}
          onChange={handleChange}
          required
          className="w-full border p-2 rounded"
        />

        <button
          type="submit"
          className="bg-blue-500 text-white px-4 py-2 rounded"
        >
          {updateId ? "C·∫≠p nh·∫≠t" : "T·∫°o"}
        </button>
      </form>

      <h3 className="text-lg font-semibold mt-8 mb-2">Danh s√°ch ca l√†m</h3>
      <ul className="shift-list">
        {shifts.map((shift) => (
          <li key={shift.id} className="shift-item">
            <div>
              <p>
                <strong>{shift.name}</strong>
              </p>
              <p>
                üïí {shift.startTime} - {shift.endTime}
              </p>
              <p>
                Tr·∫°ng th√°i:{" "}
                {shift.isActive ? (
                  <span className="text-green">‚úÖ Active</span>
                ) : (
                  <span className="text-red">‚ùå Inactive</span>
                )}
              </p>
            </div>
            <div className="shift-actions">
              <button
                onClick={() => handleEdit(shift)}
                className="btn btn-edit"
              >
                S·ª≠a
              </button>
              <button
                onClick={() => handleDelete(shift.id)}
                className="btn btn-delete"
              >
                X√≥a
              </button>
              <button
                onClick={() => toggleStatus(shift.id, shift.isActive)}
                className="btn btn-toggle"
              >
                {shift.isActive ? "T·∫Øt" : "B·∫≠t"}
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ShiftForm;
